generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  MANAGER
}

model User {
  id                String    @id @default(uuid())
  email             String    @unique
  password          String
  role              String    @default("USER")
  approved          Boolean   @default(false)
  emailVerified     Boolean   @default(false)
  verificationToken String?
  resetToken        String?
  resetTokenExpiry  DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  cart              Cart?
  orders            Order[]
  name              String?
  company           String?
  vatNumber         String?
  phoneNumber       String?
  address           String?
  discountRate      Float     @default(0)
}

model Category {
  id           String        @id @default(uuid())
  name         String        @unique
  subCategories SubCategory[]
  products     Product[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model SubCategory {
  id         String    @id @default(uuid())
  name       String
  category   Category  @relation(fields: [categoryId], references: [id])
  categoryId String
  products   Product[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@unique([name, categoryId])
}

model Brand {
  id        String    @id @default(uuid())
  name      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id                 String      @id @default(uuid())
  sku                String      @unique
  name               String
  color              String
  retailPrice        Float
  wholesalePrice     Float
  discountPercentage Float
  discountedPrice    Float
  category           Category    @relation(fields: [categoryId], references: [id])
  categoryId         String
  subCategory        SubCategory @relation(fields: [subCategoryId], references: [id])
  subCategoryId      String
  brand              Brand       @relation(fields: [brandId], references: [id])
  brandId            String
  size               String
  stock              Int
  imageUrl           String?
  cartItems          CartItem[]
  orderItems         OrderItem[]
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
}

model Cart {
  id        String     @id @default(uuid())
  user      User       @relation(fields: [userId], references: [id])
  userId    String     @unique
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String  @id @default(uuid())
  cart      Cart    @relation(fields: [cartId], references: [id])
  cartId    String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

model Order {
  id              String    @id @default(uuid())
  user            User      @relation(fields: [userId], references: [id])
  userId          String
  items           OrderItem[]
  subtotal        Float
  tax             Float
  totalAmount     Float
  status          String    @default("PENDING")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model OrderItem {
  id        String  @id @default(uuid())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Float
}